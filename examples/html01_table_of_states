(1)
letrec map =
    \f =>
        \ls =>
            case ls of
                [] => []
                | x :: xs => (f x) :: (map f xs)
in
letrec nth =
    \n =>
        \ls =>
            case n of
                0 => (case ls of
                        [] => "Err 01"
                        | x::xs => x)
                | a =>
                    case ls of
                    [] => "Err 02"
                    | x::xs => nth (n-1) xs
in
let mod =
    \a =>
        \b =>
            a - (a // b) * b
in
letrec indexedMap_ =
    \iter =>
        \f =>
            \ls =>
                case ls of
                    [] => []
                    | x::xs =>
                        (f iter x)::(indexedMap_ (iter+1) f xs)
in
let indexedMap = indexedMap_ 0 in
letrec length =
    \ls =>
        case ls of
            [] => 0
            | x::xs => 1 + (length xs)
in
let states =
  [ ["Alabama", "AL?", ""]
  , ["Arizona", "AR?", ""]
  , ["Arkansas", "AR?", ""]
  , ["California", "CA", ""]
  , ["Colorado", "CO?", ""]
  , _ ]
in
let interval = _ in
let f =
  \[state, abbrev, cap] =>
    [state, abbrev ++ interval ++ cap]
in
let rows = map f states in
    _

(2)
let padding = ["padding", "3px"] in
let headers = ["State", "Capital"] in
let headerRow =
    let styles = [padding] in
        Html.tr [] [] (map (\hs => Html.th styles [] [hs]) headers)
in
let stateRows =
    let colors = ["lightgray", "white"] in
    let drawRow =
      \i =>
        \row =>
            let color = nth (mod i (length colors)) colors in
            let columns =
              map 
                (\r => Html.td [padding, ["background-color", color]] [] [r]) 
                row
            in
            Html.tr [] [] columns
    in
      indexedMap drawRow rows
in
  Html.table [padding] [] [Html.tbody [] [] (headerRow :: stateRows)]

(3)
-- "Alaska"
-- "Connecticut", "CO?, "

(4)
letrec map =
    \f =>
        \ls =>
            case ls of
                [] => []
                | x :: xs => (f x) :: (map f xs)
in
letrec nth =
    \n =>
        \ls =>
            case n of
                0 => (case ls of
                        [] => "Err 01"
                        | x::xs => x)
                | a =>
                    case ls of
                    [] => "Err 02"
                    | x::xs => nth (n-1) xs
in
let mod =
    \a =>
        \b =>
            a - (a // b) * b
in
letrec indexedMap_ =
    \iter =>
        \f =>
            \ls =>
                case ls of
                    [] => []
                    | x::xs =>
                        (f iter x)::(indexedMap_ (iter+1) f xs)
in
let indexedMap = indexedMap_ 0 in
letrec length =
    \ls =>
        case ls of
            [] => 0
            | x::xs => 1 + (length xs)
in
let states =
  [ ["Alabama", "AL?", ""]
  , ["Arizona", "AR?", ""]
  , ["Arkansas", "AR?", ""]
  , ["California", "CA", ""]
  , ["Colorado", "CO?", ""]
  , ["Connecticut", "CO?", ""]]
in
let interval = ", " in
let f =
  \[state, abbrev, cap] =>
    [state, abbrev ++ interval ++ cap]
in
let rows = map f states in
let padding = ["padding", "3px"] in
let headers = ["State", "Capital"] in
let headerRow =
    let styles = [padding] in
        Html.tr [] [] (map (\hs => Html.th styles [] [hs]) headers)
in
let stateRows =
    let colors = [_, _] in
    let drawRow =
      \i =>
        \row =>
            let color = nth (mod i (length colors)) colors in
            let columns =
              map 
                (\r => Html.td [padding, ["background-color", color]] [] [r]) 
                row
            in
            Html.tr [] [] columns
    in
      indexedMap drawRow rows
in
  Html.table [padding] [] [Html.tbody [] [] (headerRow :: stateRows)]